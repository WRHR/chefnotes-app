{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/w/Development/projects/chefnotes/chefnotes-app/src/components/InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { useField } from \"formik\";\nimport { Box, FormControl, InputLabel, TextField } from \"@material-ui/core\";\nexport const InputField = (_ref) => {\n  let {\n    lable,\n    textarea,\n    size: _,\n    type\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"lable\", \"textarea\", \"size\", \"type\"]);\n\n  const [field, {\n    error\n  }] = useField(props);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: \"200px\",\n    margin: \"10px\",\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: field.name,\n        children: [lable, \" margin\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n        type: type,\n        error: !!error,\n        margin: \"normal\",\n        multiline: textarea\n      }, field), {}, {\n        id: field.name\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/w/Development/projects/chefnotes/chefnotes-app/src/components/InputField.tsx"],"names":["React","useField","Box","FormControl","InputLabel","TextField","InputField","lable","textarea","size","_","type","props","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SACEC,GADF,EAEEC,WAFF,EAIEC,UAJF,EAKEC,SALF,QAMO,mBANP;AAeA,OAAO,MAAMC,UAAqC,GAAG,UAM/C;AAAA,MANgD;AACpDC,IAAAA,KADoD;AAEpDC,IAAAA,QAFoD;AAGpDC,IAAAA,IAAI,EAAEC,CAH8C;AAIpDC,IAAAA;AAJoD,GAMhD;AAAA,MADDC,KACC;;AACJ,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBb,QAAQ,CAACW,KAAD,CAAnC;AACA,sBACE,QAAC,GAAD;AAAK,IAAA,KAAK,EAAC,OAAX;AAAmB,IAAA,MAAM,EAAC,MAA1B;AAAA,2BACE,QAAC,WAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEC,KAAK,CAACE,IAA3B;AAAA,mBAAkCR,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,IAAI,EAAEI,IAAjB;AAAuB,QAAA,KAAK,EAAE,CAAC,CAACG,KAAhC;AAAuC,QAAA,MAAM,EAAC,QAA9C;AAAuD,QAAA,SAAS,EAAEN;AAAlE,SAAgFK,KAAhF;AAAuF,QAAA,EAAE,EAAEA,KAAK,CAACE;AAAjG;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhBM","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\nimport { useField } from \"formik\";\nimport {\n  Box,\n  FormControl,\n  FormControlLabel,\n  InputLabel,\n  TextField,\n} from \"@material-ui/core\";\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  lable: string;\n  name: string;\n  textarea?: boolean;\n  type?: string\n};\n\nexport const InputField: React.FC<InputFieldProps> = ({\n  lable,\n  textarea,\n  size: _,\n  type,\n  ...props\n}) => {\n  const [field, { error }] = useField(props);\n  return (\n    <Box width='200px' margin='10px'>\n      <FormControl>\n        <InputLabel htmlFor={field.name}>{lable} margin</InputLabel>\n        <TextField type={type} error={!!error} margin='normal' multiline={textarea} {...field} id={field.name} />\n      </FormControl>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}