{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/w/Development/projects/chefnotes/chefnotes-app/src/pages/login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box, Button, CircularProgress, Paper } from \"@material-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { MeDocument, useLoginMutation } from \"../generated/graphql\";\nimport { InputField } from \"../components/InputField\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\n\nconst login = ({}) => {\n  _s();\n\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        usernameOrEmail: \"\",\n        password: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await login({\n          variables: values,\n          update: (cache, {\n            data\n          }) => {\n            cache.writeQuery({\n              query: MeDocument,\n              data: {\n                __typename: \"Query\",\n                me: data === null || data === void 0 ? void 0 : data.login.user\n              }\n            });\n          }\n        });\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.login.errors) {\n          setErrors(toErrorMap(response.data.login.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.login.user) {\n          if (typeof router.query.next === \"string\") {\n            router.push(router.query.next);\n          } else {\n            router.push(\"/\");\n          }\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          children: [/*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputField, {\n            lable: \"Username or Email\",\n            name: \"usernameOrEmail\",\n            placeholder: \"Username or Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            lable: \"Password\",\n            type: \"password\",\n            placeholder: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(login, \"nRbpaRou4ZuFDO6DKcD51iHnHq0=\", false, function () {\n  return [useRouter, useLoginMutation];\n});\n\nexport default login;","map":{"version":3,"sources":["/Users/w/Development/projects/chefnotes/chefnotes-app/src/pages/login.tsx"],"names":["React","Box","Button","CircularProgress","Paper","Form","Formik","MeDocument","useLoginMutation","InputField","useRouter","toErrorMap","login","router","usernameOrEmail","password","values","setErrors","response","variables","update","cache","data","writeQuery","query","__typename","me","user","errors","next","push","isSubmitting"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Box, Button, CircularProgress, Paper } from \"@material-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { MeDocument, MeQuery, useLoginMutation } from \"../generated/graphql\";\nimport { InputField } from \"../components/InputField\";\nimport { useRouter } from \"next/router\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\ninterface Values {\n  usernameOrEmail: string;\n  password: string;\n}\n\nconst login: React.FC = ({}) => {\n  const router = useRouter();\n  const [login] = useLoginMutation();\n  return (\n    <Box>\n      <Formik\n        initialValues={{\n          usernameOrEmail: \"\",\n          password: \"\",\n        }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await login({\n            variables: values,\n            update: (cache, { data }) => {\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: \"Query\",\n                  me: data?.login.user,\n                },\n              });\n            },\n          });\n          if (response.data?.login.errors) {\n            setErrors(toErrorMap(response.data.login.errors));\n          } else if (response.data?.login.user) {\n            if (typeof router.query.next === \"string\") {\n              router.push(router.query.next);\n            } else {\n              router.push(\"/\");\n            }\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Paper elevation={3}>\n              <Box>\n                \n              </Box>\n              <InputField\n                lable=\"Username or Email\"\n                name=\"usernameOrEmail\"\n                placeholder=\"Username or Email\"\n              />\n              <InputField\n                name=\"password\"\n                lable=\"Password\"\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              {isSubmitting ? <CircularProgress /> : <Button>login</Button>}\n            </Paper>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default login;\n"]},"metadata":{},"sourceType":"module"}